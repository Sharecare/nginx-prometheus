lua_shared_dict prometheus_metrics 10M;
lua_package_path '/usr/local/openresty/luajit/lib/?.lua;;';

init_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")

    http_requests = prometheus:counter(
        "nginx_http_requests", "Number of HTTP requests", {"host", "status"})
    http_request_time = prometheus:histogram(
        "nginx_http_request_time", "HTTP request time", {"host"})
    http_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})

    upstream_requests = prometheus:counter(
        "nginx_http_upstream_requests", "Number of HTTP upstream requests", {"addr", "status"})
    upstream_response_time = prometheus:histogram(
        "nginx_http_upstream_response_time", "HTTP upstream response time", {"addr"})
    upstream_connect_time = prometheus:histogram(
        "nginx_http_upstream_connect_time", "HTTP upstream connect time", {"addr"})
    upstream_first_byte_time = prometheus:histogram(
        "nginx_http_upstream_first_byte_time", "HTTP upstream first byte time", {"addr"})
    upstream_header_time = prometheus:histogram(
        "nginx_http_upstream_header_time", "HTTP upstream header time", {"addr"})
    upstream_session_time = prometheus:histogram(
        "nginx_http_upstream_session_time", "HTTP upstream session time", {"addr"})

    upstream_bytes_received = prometheus:counter(
        "nginx_http_upstream_bytes_received", "Number of HTTP upstream bytes received", {"addr"})
    upstream_bytes_sent = prometheus:counter(
        "nginx_http_upstream_bytes_sent", "Number of HTTP upstream bytes sent", {"addr"})

    upstream_cache_status = prometheus:counter(
        "nginx_http_upstream_cache_status", "Number of HTTP upstream cache status", {"addr", "status"})
}

log_by_lua_block {
    http_requests:inc(1, {ngx.var.host, ngx.var.status})
    http_request_time:observe(ngx.now() - ngx.req.start_time(), {ngx.var.host})

    if ngx.var.upstream_addr ~= nil then
        for addr in string.gmatch(ngx.var.upstream_addr, '([^,]+)') do
            upstream_requests:inc(1, {addr, ngx.var.upstream_status})
            
            upstream_response_time:observe(tonumber(ngx.var.upstream_response_time), {addr})
            upstream_connect_time:observe(tonumber(ngx.var.upstream_connect_time), {addr})
            
            if ngx.var.upstream_first_byte_time ~= nil then
                upstream_first_byte_time:observe(tonumber(ngx.var.upstream_first_byte_time), {addr})
            end

            upstream_header_time:observe(tonumber(ngx.var.upstream_header_time), {addr})
            if ngx.var.upstream_session_time ~= nil then
                upstream_session_time:observe(tonumber(ngx.var.upstream_session_time), {addr})
            end

            upstream_bytes_received:inc(tonumber(ngx.var.upstream_bytes_received), {addr})
            upstream_bytes_sent:inc(tonumber(ngx.var.upstream_bytes_sent), {addr})

            if ngx.var.upstream_cache_status ~= nil then
                metrics_upstream_cache_status:inc(1, {addr, ngx.var.upstream_cache_status})
            end
        end
    end
}
